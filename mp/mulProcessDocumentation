1、先假设进程运行在ring1级上，从内核进入进程，即从ring0转向ring1。
高特权级到低特权级是通过ret实现，这里用了iretd; 发生中断过程，压栈顺序 ss esp  eflag cs eip;执行iretd指令，出栈是压栈的逆过程

2、多进程之间切换，通过时钟中断实现。一个进程在运行(假定运行在ring1上)，当产生一个时钟中断，运行特权级需要从ring1转向ring0，需要获取ring0特权级的堆栈，将ss esp  eflag cs eip压入到ring0的堆栈
即读取TSS中ss0和esp0; 而此ss0和esp0的值正是指向当进程，中断压栈过程就是保存进程的堆栈、标志寄存器、下条指令地址; 时钟中断的产生，一小片时间段的结束，但进程的信息保存完好。进入中断后，后续保存其他寄存器。
中断在转换到新进程前，将会使esp指向新进程，修改ring0的ss和esp指向新进程，加载新进程的ldt表，并通过出栈指令，新进程寄存器的值覆盖当前寄存器，再运行iret后，跳转到新进程cs、eip指定的地址，即真正进入新进程



时钟中断 重入, 在系统级中调用


保护模式下 中断与异常



lea 指令，获取变量值的地址
