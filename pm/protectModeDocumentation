1、标志寄存器(EFLAGS)、内存管理器(GDTR/LDTR/IDTR/TR)、控制寄存器(CR0/CR1/CR2/CR3)

2、一致性
   1) 数据段为都是非一致性的，可以被高特权级和同级访问
   2）非一致性的代码，只能访问同级的代码
      ring0 访问 ring3 出错
   3) 一致性代码，访问同级或高特权级的代码

3、特权级检验(CPL/DPL/RPL)
   CPL(Current Privilege Level):当前的特权级，存储在cs和ss的第0位和第1位上;一致性代码的CPL，访问高级特权级代码时，不会被改变
   DPL(Descriptor Privilege Level): 描述符特权级，不同的描述符的DPL含义不同
   1) 数据段: 指定可访问该数据段的最低特权级，即高访问低
   2) 非一致代码段: 规定只有该特权级才能这段代码段 
   3) 一致代码:指定可访问该数据段的最高特权级，即低访问高
   4) 通过调用门访问的非一致代码段和一致代码: 指定可访问该段的最高特权级，即低访问高，其中目标是“非一致代码的jmp”，要求CPL=DPL
   5) TSS: 同数据段
   6) 调用门: 同数据段
   RPL(Requested Privilege Level): 在选择子的后2位，RPL同CPL起作用，取他们中低的特权级参与与其他特权级检验
   1) 通过jmp 或者 call 进行特权级间跳转，如果目标是一致代码，那么CPL >= DPL，RPL不做检验
   

4、特权级跳转
   1) 高到低跳转，通过ret 实现, 调用的逆过程
   2）低到高跳转：在通过门实现的情况下 CPL<=门.DPL、 门.RPL<=门.DPL、  目标.DPL<=CPL

5、堆栈
   1) 短调用(call、ret)，入栈出栈的值只有ip(eip)
   2) 长调用(call、retf), 入栈出栈的值包含cs、ip(eip);如果有特权级改变，还要先入栈ss、esp，再压入cs、ip(eip);
      出栈是逆过程
   3）中断(int、iretd), 入栈顺序: ss、esp、eflags、cs、eip



调用门与中断门和陷阱门不同，在中断门和陷阱门中BYTE4的低5位变成了保留位，而不再是Param Count,(没必要传参数)
表示Type的4位变成了0XE(中断门)或0xF(陷阱门)

选择子 为2个字节，16位;是描述符站GDTR中的偏移地址+后3位的属性(T1+RPL)，在保护模式下，段寄存器的值为选择子的值


lodsb: mov al, [ds:ei] 
       add ei,1 or sub ei,1
cld: df=0 复位

中断EOI


jmp\call 区别：1）call 涉及到堆栈， 包含短调用和长调用
              2) call 有返回的过程，jmp则没有，使用jmp后，要考虑执行代码在哪里结束





